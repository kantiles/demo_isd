---
title: "Birth indicators in France"
format: 
  dashboard:
    logo: person-arms-up
    orientation: rows
    nav-buttons:
        - icon: github
          href: https://github.com/kantiles/demo_isd
---

```{ojs}
//| output: false

// load data
data = FileAttachment("data/isd_assemble_ojs.csv").csv({delimiter: ";", typed: true})

data_grid = FileAttachment("data/grid_dep_ojs.csv").csv({delimiter: ";", typed: true})
```

# Dep

## {.topbar}


```{ojs}
Inputs.bind(Inputs.select(data.map(d => d.code_geo.toLocaleString().padStart(2, "0")), {sort: true, unique: true, label: "Dep"}), viewof dep)
```

## Row {height=70%}


```{ojs}
//| output: false

depFrance = FileAttachment("data/raw.topojson").json()
depContours = topojson.feature(depFrance, "France")

projection = d3.geoMercator().center([2, 47])                // GPS of location to zoom on
    .scale(980)                       // This is like the zoom
    .translate([ 600/2, 300/2 ])
pathGenerator = d3.geoPath(projection)

frMap = value => {
  const svg = d3.create('svg')
      .attr('width', 600)
      .attr('height', 300);

  const statesDrawn = svg.selectAll(".state")
    .data(depContours.features)
    .join("path")
      .attr("class", "state")
      .attr("d", pathGenerator)
      .attr("fill", "white")
      .attr("stroke", "blue")
      // sending updates:
      // when a state is clicked, set the value property and emit an input event
      .on('click', (event, d) => svg.property('value', d.properties.INSEE_DEP).dispatch('input'));

  // receiving updates:
  // update the map in the setter
  Object.defineProperty(svg.node(), "value", {
    get() {
      return value;
    },
    set(v) {
      value = v;
      statesDrawn
          .attr("fill", d => d.properties.INSEE_DEP === v ? "blue" : "white")
          .attr("opacity", d => d.properties.INSEE_DEP === v ? 0.5 : 1.0);
    }
  });

  // initial value
  svg.property('value', value);
  
  return svg.node();
}
```

```{ojs}
viewof dep = frMap('2A')
```


```{ojs}
//| output: false


// filter data
filtered = data.filter(function(x) {
  return dep == x.code_geo ;
})

// filter for each graph
// to do - function to wrap that
filtered_c22 = filtered.filter(function(x) {
  return x.isd == "C22"})

filtered_c23 = filtered.filter(function(x) {
  return x.isd == "C23"})

filtered_c24 = filtered.filter(function(x) {
  return x.isd == "C24"})

// last year
data_last = data.filter(function(x) {
  return x.annee == 2022})

filtered_last = data_last.filter(function(x) {
  return dep == x.code_geo})
```

## Row
```{r}
#| content: valuebox
#| title: nombre de naissances

cat(54)
```

```{r}
#| content: valuebox
#| title: faibles poids
#| color : red

cat(54)
```

```{r}
#| content: valuebox
#| title: prema
#| color : blue
#| icon: pencil

cat(54)
```

## Row

```{ojs}
//| title: last year

// todo : function

// barcode with value
Plot.plot({
    marks : [
        Plot.tickX(data_last.filter(function(x) {
  return x.isd == "C24"}), {x: "value", y: "indicator", stroke:"lightgrey"}),
        Plot.tickX(filtered_last.filter(function(x) {
  return x.isd == "C24"}), {x: "value", y: "indicator", stroke:"red"})
    ]
    })
```

## Row

```{ojs}
//| title: c24 - par age
Plot.plot({
    x:{domain: [2012, 2022]},
    marks : [
        Plot.areaY(filtered_c24, {x: "annee", y: "value", fill:"indicator"})
    ]
    })

```

# Indicators

## {.sidebar}

ISD :   

```{ojs}
// mettre des defaults
viewof isd = Inputs.radio(
   data.map(d => d.isd), {sort: true, unique: true, value: "C24"}
)
```

Indicateur : 

```{ojs}
viewof indicator = Inputs.radio(
   data.filter((x)=>{return x.isd == isd}).map(d => d.indicator), {sort: true, unique: true, value: "part_accouch_m20"}
)
```

```{ojs}
//| output: false
data_grid_filtered = data_grid.filter(function(x){
        return x.isd == isd && x.indicator == indicator
      })

```

## Row {height=60%}

```{ojs}
//| title: carte

// indicateur global sur un graph
Plot.plot({
  height: 600,
  axis: null,
  color: {
    type: "linear",
    scheme: "piyg"
  },
  marks: [
    Plot.cell(data_grid_filtered, {x: "col", y: "row", fill: "value", inset: 0.5, tip: true}),
    Plot.text(data_grid_filtered, {x: "col", y: "row",  text: "code", fill: "black", dy: -5}),
    Plot.text(data_grid_filtered, {x: "col", y: "row",  text: "value", fill: "black", dy: 7, fillOpacity: 0.6})
  ]
})
```

## Row

```{ojs}
//| title: c24 - par age

// indicateur global sur un graph
Plot.plot({
    x: {axis: "top", grid: true, domain:[0, 100]},
    color: {scheme: "spectral", legend: true},
    marks: [
      Plot.ruleX([0]),
      Plot.barX(data_last.filter(function(x){
        return x.isd == "C24"
      }), {x: "value", y: "code_geo", fill: "indicator", title: "indicator", tip: true, sort: {color: null}}), // color in input order
      Plot.text(data_last.filter(function(x){
        return x.isd == "C24"
      }), Plot.selectMinX({x: "value", y: "code_geo", textAnchor: "end", dx: -6, text: "code_geo"}))
    ]
  });
```

# Docs

This dashboard is an exploration around some context indicators about births in France. It aims at showing some capabilities of [Observable JS](https://observablehq.com/) and [Quarto Dashboard](https://quarto.org/docs/dashboards/interactivity/observable.html) to display data in a reactive context. Data cleaning and wrangling was done in R by Kantiles. Code is available on [Github](https://github.com/kantiles/demo_isd).

Data come from [France's Ministry of Health](https://data.drees.solidarites-sante.gouv.fr/explore/dataset/1520_indicateurs-de-sante-perinatale/information/).

> This vizualisation hasn't been approved by the Ministry of Health and should only be use as a demonstrator. Please see the official dashboard on [VILAS](https://odin-dataviz-drees.sante.gouv.fr/digdash_dashboard_dataviz_drees/?defaultPage=vilas_Accueil&user=dataviz_sante&pass=dataviz_sante).
